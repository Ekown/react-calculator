{"version":3,"sources":["components/Display/Display.jsx","components/Key/Key.jsx","components/Keypad/Keypad.jsx","components/Calculator/Calculator.jsx","components/App/App.jsx","index.js"],"names":["Display","displayValue","className","Key","keyAction","keyType","keyValue","onClick","Keypad","callOperator","numbers","operators","setOperator","updateDisplay","numberKeys","map","number","key","operatorKeys","operator","Calculator","state","selectedOperator","storedValue","updateStoredValue","hasDecimal","includes","parseFloat","parseInt","toFixed","toString","setState","value","lastDigit","length","substr","render","Component","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.39568880.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Display.css';\n\nconst Display = ({ displayValue }) => (\n\t<div className=\"display-container\">\n\t\t<p className=\"display-value\">\n\t\t\t{displayValue}\n\t\t</p>\n\t</div>\n);\n\nDisplay.propTypes = { displayValue: PropTypes.string.isRequired };\n\nexport default Display;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Key.css';\n\nconst Key = ({ keyAction, keyType, keyValue }) => (\n\t<div\n\t\tclassName={`key-container ${keyType}`}\n\t\tonClick={() => keyAction(keyValue)}\n\t>\n\t\t<p className=\"key-value\">\n\t\t\t{keyValue}\n\t\t</p>\n\t</div>\n);\n\nKey.propTypes = {\n\tkeyAction: PropTypes.func.isRequired,\n\tkeyType: PropTypes.string.isRequired,\n\tkeyValue: PropTypes.string.isRequired,\n};\n\nexport default Key;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Keypad.css';\nimport Key from '../Key/Key';\n\nconst Keypad = ({ callOperator, numbers, operators, setOperator, updateDisplay }) => {\n\tconst numberKeys = numbers.map(number => (\n\t\t<Key \n\t\t\tkey={number}\n\t\t\tkeyAction={updateDisplay}\n\t\t\tkeyType=\"number-key\"\n\t\t\tkeyValue={number}\n\t\t/>)\n\t);\n\n\tconst operatorKeys = operators.map(operator => (\n\t\t<Key\n\t\t    key={operator}\n\t\t    keyAction={setOperator}\n\t\t    keyType=\"operator-key\"\n\t\t    keyValue={operator}\n\t    />)\n\t);\n\n\treturn (\n\t    <div className=\"keypad-container\">\n\t      <div className=\"numbers-container\">\n\t        {numberKeys}\n\t      </div>\n\t      <div className=\"operators-container\">\n\t        {operatorKeys}\n\t      </div>\n\t      <div className=\"submit-container\">\n\t        <Key\n\t          keyAction={callOperator}\n\t          keyType=\"submit-key\"\n\t          keyValue=\"=\"\n\t        />\n\t      </div>\n\t    </div>\n  );\n};\n\nKeypad.propTypes = {\n\tcallOperator: PropTypes.func.isRequired,\n\tnumbers: PropTypes.array.isRequired,\n\toperators: PropTypes.array.isRequired,\n\tsetOperator: PropTypes.func.isRequired,\n\tupdateDisplay: PropTypes.func.isRequired,\n};\n\nexport default Keypad;","import React, { Component } from 'react';\nimport Display from '../Display/Display';\nimport Keypad from '../Keypad/Keypad';\nimport './Calculator.css';\n\nclass Calculator extends Component {\n\tstate = {\n\t\t// value to be displayed in <Display />\n\t\tdisplayValue: '0',\n\t\t// values to be displayed in number <Keys />\n\t\tnumbers: ['9', '8', '7', '6', '5', '4', '3', '2', '1', '.', '0','ce'],\n\t\t// values to be displayed in operator <Keys />\n\t\toperators: ['/', 'x', '-', '+'],\n\t\t// operator selected for math operation\n\t\tselectedOperator: '',\n\t\t// stored value to use for math operation\n\t\tstoredValue: '',\n\t}\n\n\tcallOperator = () => {\n\t\tlet { displayValue, selectedOperator, storedValue } = this.state;\n\t    // temp variable for updating state storedValue\n\t    const updateStoredValue = displayValue;\n\t    // Set the decimal flag for the display value\n\t    let hasDecimal = (displayValue.includes('.') || storedValue.includes('.'));\n\n\t    // parse strings for operations\n\t    displayValue = displayValue.includes('.') ? parseFloat(displayValue) : parseInt(displayValue, 10);\n    \tstoredValue = storedValue.includes('.') ? parseFloat(storedValue) : parseInt(storedValue, 10);    \n\n\t    // performs selected operation\n\t    switch (selectedOperator) {\n\t      case '+':\n\t        displayValue = storedValue + displayValue;\n\t        break;\n\t      case '-':\n\t        displayValue = storedValue - displayValue;\n\t        break;\n\t      case 'x':\n\t        displayValue = storedValue * displayValue;\n\t        break;\n\t      case '/':\n\t        displayValue = storedValue / displayValue;\n\t        break;\n\t      default:\n\t        // set displayValue to zero if no case matches\n\t        displayValue = '0';\n\t        // revert the decimal flag\n\t        hasDecimal = false;\n\t    }\n\n\t    // converts displayValue to a string\n\t    displayValue = hasDecimal ? displayValue.toFixed(1) : displayValue.toString();\n\t    // reset selectedOperator\n\t    selectedOperator = '';\n\t    // check for 'NaN' or 'Infinity', if true set displayValue to '0'\n\t    if (displayValue === 'NaN' || displayValue === 'Infinity') displayValue = '0';\n\n\t    this.setState({ displayValue, selectedOperator, storedValue: updateStoredValue });\n\t}\n\n\tsetOperator = value => {\n\t\tlet { displayValue, selectedOperator, storedValue } = this.state;\n\n\t    // check if a value is already present for selectedOperator\n\t    if (selectedOperator === '') {\n\t      // update storedValue to the value of displayValue\n\t      storedValue = displayValue;\n\t      // reset the value of displayValue to '0'\n\t      displayValue = '0';\n\t      // update the value of selectedOperator to the given value\n\t      selectedOperator = value;\n\t    } else {\n\t      // if selectedOperator is not an empty string\n\t      // update the value of selectedOperator to the given value\n\t      selectedOperator = value;\n\t    }\n\n\t    this.setState({ displayValue, selectedOperator, storedValue });\n\t}\n\n\tupdateDisplay = value => {\n\t\tlet { displayValue } = this.state;\n\t\tlet lastDigit = displayValue[displayValue.length - 1];\n\n\t\t// Does the diplayValue already has a decimal point?\n\t    if (displayValue.includes('.')) {\n\t    \t// prevent multiple occurences of '.'\n\t    \tif (value === '.') value = '';\n\t    \t// limit the decimal place to 1\n\t    \tif (value !== '.' && lastDigit !== '.') value = '';\n\t    }\n\n\t    if (value === 'ce') {\n\t    \t// deletes last char in displayValue\n\t    \tdisplayValue = displayValue.substr(0, displayValue.length - 1);\n\t    \t// set displayValue to '0' if displayValue is empty string\n\t    \tif (displayValue === '') displayValue = '0';\n\t    } else {\n\t    \t// replace displayValue with value if displayValue equal to '0'\n\t    \t// else concatenate displayValue and value\n\t    \tdisplayValue === '0' ? displayValue = value : displayValue += value;\n\t    }\n\n\t    this.setState({ displayValue });\n\t}\n\n\trender = () => {\n\t\tconst { displayValue, numbers, operators } = this.state\n\n\t\treturn (\n\t\t\t<div className=\"calculator-container\">\n\t\t\t\t<Display displayValue={displayValue} />\n\t\t\t\t<Keypad\n\t\t\t\t\tcallOperator={this.callOperator}\n\t\t\t\t\tnumbers={numbers}\n\t\t\t\t\toperators={operators}\n\t\t\t\t\tsetOperator={this.setOperator}\n\t\t\t\t\tupdateDisplay={this.updateDisplay}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from '../Calculator/Calculator';\n\nconst App = () => (\n\t<div className=\"app-container\">\n\t\t<Calculator />\n\t</div>\n);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}